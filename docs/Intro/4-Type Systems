title - Meta Programming Introduced

.section :empty_arrays, "Empty arrays", 23
  %p
    Let's create an empty array. It's easy. Just do `[]`.

   !enchant 25
      short_name :build_empty_array
      exercise!
      starting_code <<-DATA
               []
      DATA

      code_wrapper <<-DATA
         def user_code
           <%= user_code %>
         end
      DATA

      specs <<-DATA
         it "is truthful" do
           user_code.should eq([])
         end
      DATA

   !release

  %p
    See the result? It's pretty obvious that's an empty array. Well, `[]` is actually a shortform of `Array.new` which is rarely used. Try it


   !enchant 27
      short_name :build_new
      exercise!
      code_wrapper <<-DATA
         def user_code
           <%= user_code %>
         end
      DATA

      specs <<-DATA
         it "is truthful" do
           user_code.should == []
         end
      DATA

   !release

  %p
    As you can see - identical results.


.section :building_arrays, "Building arrays", 29
  %p

  You can also create an array with a known set of values by placing them inside the `[]` like so: `[1, 2, 3]. Try it by creating an array with the numbers 1 through 5 inclusive.


.section :growing, "Growing arrays", 31
  In Ruby, any object of any type can be added to an array, not just numbers. How about appending the word 'woot' to an array? Try using `<<` - that's the 'append' function - to add it to the array below.


   !enchant 33
      short_name :append
      exercise!
      starting_code <<-DATA
              "[1, 2, 3, 4, 5]"
      DATA

      code_wrapper <<-DATA
         def user_code
           <%= user_code %>
         end
      DATA

      specs <<-DATA
         it "is truthful" do
           user_code.should == [1,2,3,4,5,'woot']
         end
      DATA

   !release


.section :transforming, "Transforming arrays", 35
  Now on to more interesting things, but with a little tip from me first. Try running this:


   !enchant 37
      short_name :map
      exercise!
      starting_code <<-DATA
             "[1, 2, 3, 4, 5].map { |i| i + 1 }"
      DATA

   !release

  You'll notice that the output, `[2, 3, 4, 5, 6]` is the result of applying the code inside the curly brace to every single element in the array. The result is an entirely new array containing the results.

  In Ruby, the method `map` is used to transform the contents an array according to a specified set of rules defined in code.

  Go on, you try it. Multiply every element in the array below by 3 to get `[3, 6, 9]`.


   !enchant 39
      short_name :multiply_everything
      exercise!
      starting_code <<-DATA
              "[1, 2, 3, 4, 5].map { |i| i + 1 }"
      DATA

   !release

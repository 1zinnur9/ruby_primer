title - Iterating over Hashes

.section :iterating_over_hash, "Iterating over a Hash", 620
  %p
    You can use the <code>each</code> method to iterate over all the elements in
    a Hash. However unlike <code>Array#each</code>, when you iterate over a Hash using 
    <code>each</code>, it passes two values to the block: the key and the value of each element.
    
  %p Let us see how we can use the <code>each</code> method to display the restaurant menu.
  
  !enchant 2800
    example!
    short_name :hash_iterate_each_example
    starting_code <<-DATA
      restaurant_menu = { "Burger" => 3, "Pizza" => 10, "Coffee" => 2 }
      restaurant_menu.each do | item, price |
        puts "#{item}: $#{price}"
      end
    DATA
    code_wrapper <<-DATA
      <%= user_code %>
    DATA
  !release

  %p
    The restaurant is doing well, but it is forced to raise prices due to increasing costs.
    Use the <code>each</code> method to increase the price of all
    the items in the <code>restaurant_menu</code> by 10%.

  !enchant 2801
    short_name :hash_iterator_exercise
    exercise!
    starting_code <<-DATA
      restaurant_menu = { "Burger" => 3, "Pizza" => 10, "Coffee" => 2 }
      # write the each loop here. 
      
      
      
      
    DATA
    hint <<-DATA
      <p style='padding:1em;'>
        This is how you find the increased (10%) price: <code>price + (price * 0.1)</code>
      </p>
    DATA
    solution <<-DATA
restaurant_menu = { "Burger" => 3, "Pizza" => 10, "Coffee" => 2 }
restaurant_menu.each do |item, price|
  restaurant_menu[item] = price + (price * 0.1)
end
    DATA
    
    code_wrapper <<-DATA
      def user_code
        <%= user_code %>
        restaurant_menu
      end
    DATA
    
    specs <<-DATA
      it "the price of burger should be 10% more in the new menu" do
        user_code["Burger"].should be_close(3.3, 0.01)
      end
      it "the price of Pizza should be 11 which 10% more from the old price" do
        user_code["Pizza"].should be_close(11, 0.01)
      end
    DATA
  !release
  
.section :keys_and_values_in_a_hash, "Extracting the keys and values from a Hash", 621
  %p
    Every Hash object has two methods: <code>keys</code> and <code>values</code>.
    <code>keys</code> will give you an Array of all the keys in the Hash. Similarly
    <code>values</code> returns an Array of all the values. 
    
  %p
    Try getting an array of all the keys in the <code>restaurant_menu</code> hash:
 
  !enchant 2805
    exercise!
    short_name :hash_keys_values_examples
    starting_code <<-DATA
restaurant_menu = { "Burger" => 5, "Pizza" => 12, "Coffee" => 1 }  
# your code here    
    DATA
    
    specs <<-DATA
      it "list all the keys (item names) in the menu" do
        user_code.should == ["Burger","Pizza","Coffee"]
      end
    DATA
    
    solution <<-DATA
restaurant_menu = { "Burger" => 5, "Pizza" => 12, "Coffee" => 1 }  
restaurant_menu.keys
    DATA
    
    code_wrapper <<-DATA
      def user_code
        <%= user_code %>
      end      
      pp user_code
    DATA
  !release

title - Boolean Expressions in Ruby

.section :introduction_to_ruby_expressions, "Beginner's Guide to Expressions in Ruby", 163
  %p
    Ruby uses the <code>==</code> operator for comparing two objects. 
    The other usual operators like greater than, less than, greater than or equal to etc. are supported.
    Let us take a look at some sample boolean expressions:
    
  %p
    %code age >= 23 
    %br
    %code name == 'Bob' 
    %br
  
  %p
    Boolean expressions like the above always return either the <code>true</code> or <code>false</code> 
    objects.
  
  %h3 Combining Expressions using the <code>and</code> and <code>or</code> operators   
  %p Let us start with the examples:
  %p
    %code age >= 23 and name == 'Bob'
    %br
    %code age >= 23 and (name == 'Bob' or name == 'Jill')
    %br
    %code age >= 23 and name != 'Bob' 
  
  %p
    Just like the order of operations in mathematical expressions (PEMDAS anybody?),
    Ruby also has a set of laws governing the precedence of its various operators. However
    at this point you need not bother much about it. Just make sure to use parantheses generously
    so that the order of operation is unambiguous to Ruby as well as for someone reading your code. 

  %h3 Negating expressions
  %p
    Ruby lets you negate expressions using the <code>not</code> operator as well as the <code>!=</code> operator. 
    Here are two equivalent expressions that use both styles:
    %br
    <code>Time.now.month != 4</code> and
    %br
    <code>not (Time.now.month == 4)</code>
  %p
    It is a good practice to use the <code>not</code> operator around the enclosed 
    condition when you need to negate a large expression. Take a look at this slightly 
    larger expression:
  %p
    <code>(user.sun_sign != 'gemini' and (not user.birth_time.hour.between? 4, 12))</code>
  %p
    Even though this will work fine, from a code readability perspective, it is better to negate everything 
    using a single enclosed <code>not</code>. Like: 
  %p
    <code>not (user.sun_sign == 'gemini' or user.birth_time.hour.between? 4, 12)</code>
  
  %h3 Here comes the exercises!
  %p
    Let us say you are trying to recruit team-members for your new startup! Given a <code>candidate</code>, 
    you need an expression that will tell you whether they fit into certain types. 
    This is how a <code>candidate</code> object would look:
  %p
    %pre{:style => 'font-size: 12px;'}
      candidate.years_of_experience = 4
      candidate.github_points = 293
      candidate.languages_worked_with = ['C', 'Ruby', 'Python', 'Clojure']
      candidate.applied_recently? = false
      candidate.age = 26
    
  %p
    <b>First Task</b>: Tell me whether a given candidate is a Ruby programmer who has not applied to us recently. For this exercise
    all you need are the <code>candidate.languages_worked_with</code> and <code>candidate.applied_recently?</code> methods.
    
    !enchant 3271
      exercise!
      requires ['ostruct']
      short_name :expression_exercise_simple_not
      starting_code <<-DATA
        is_a_ruby_programmer = # Fill in the expression here
        
      DATA
      hint <<-DATA
        Tip 1. Use parantheses generously. If you start your expression with a 'not' operator, wrap the whole expression inside parantheses. <br/>
        Tip 2. languages_worked_with is an Array. How do you check whether an element exists in an Array? Might want to refer to the Ruby Collections chapter for inspiration!
      DATA
      solution <<-DATA
is_a_ruby_programmer = (candidate.languages_worked_with.include? 'Ruby') and 
                       (not candidate.applied_recently?)

      DATA
      code_wrapper <<-DATA
        def user_code_input
          <<-USER_INPUT
            <%= user_code %>
          USER_INPUT
        end
      DATA
      specs <<-DATA
        it "classifies a ruby programmer correctly" do
          candidate = OpenStruct.new
          candidate.languages_worked_with = ['Scala', 'Ruby', 'Java']
          def candidate.applied_recently? 
            false
          end
          eval(user_code_input).should be
        end
        it "programmers who do not list Ruby among languages that they've worked with are not considered Ruby programmers" do
          candidate = OpenStruct.new
          candidate.languages_worked_with = ['C++', 'Haskell']
          def candidate.applied_recently?
            false
          end
          eval(user_code_input).should_not be
        end        
        it "a ruby programmer who has applied recently is not considered" do
          candidate = OpenStruct.new
          candidate.languages_worked_with = ['Ruby', 'Haskell']
          def candidate.applied_recently? 
            true
          end
          eval(user_code_input).should_not be        
        end
      DATA
    !release

  %p
    Now that we have simple expressions out of the way, let us take a look at a slightly more involved requirement:
  %p
    This time we are looking to hire experienced Ruby programmers. Our ideal candidate has <b>more 
    than 2 years experience</b>, but some programmers become really good even before that. 
    We'll consider their Github points (a nice indicator of a good programmer), and even if they are not experienced,
    candidates with <b>more than 500 Github points</b> can apply. And there is one more catch:
    Ruby being a cool and awesome language, a lot of smart youngsters are very good at it. We love those kids,
    but for this particular job we'd rather have them study at school than work. Let us filter out candidates who
    are <b>younger than 15</b>. Not to get carried away, the earlier requirement of not considering <b>candidates who applied recently</b>
    also holds here.
  %p
    If you haven't solved these types of expressions before, try getting one condition right at a time. For each condition
    you get correct, some tests will start passing. As your expression matures to take care of all the criteria, all the tests will pass
    and you'll have a green flag. Now, march on!
    
  !enchant 3272
    short_name :expression_experienced_programmer
    requires ['ostruct']
    exercise!
    code_wrapper <<-DATA
      def user_code_input
        <<-USER_INPUT
        <%= user_code %>
        USER_INPUT
      end
    DATA
    
    hint <<-DATA
      1. Use parantheses generously. If you start your expression with a 'not' operator, wrap everything inside a parantheses. <br/>
      2. You can have 2 or more years of experience, or  more than 500 Github points, or both. <br/> 
    DATA

    starting_code <<-DATA
      is_an_experienced_programmer = # Fill your expression here
      
      
      
      
    DATA
    solution <<-DATA
is_an_experienced_ruby_programmer = 
  (candidate.languages_worked_with.include? 'Ruby') and            
  (candidate.years_of_experience >= 2 or candidate.github_points >= 500) and
  not (candidate.age < 15 or candidate.applied_recently?)
    DATA
    
    specs <<-SPECS_DATA
      it "a programmer who has the 3 years of experience is accepted" do
        candidate = OpenStruct.new
        candidate.years_of_experience = 3
        candidate.github_points = 0
        candidate.age = 25
        candidate.languages_worked_with = ['Scala', 'Ruby', 'Java']
        def candidate.applied_recently? 
          false
        end
        eval(user_code_input).should be
      end
      it "a programmer with 600 github points is accepted" do
        candidate = OpenStruct.new
        candidate.years_of_experience = 1
        candidate.github_points = 600
        candidate.age = 25
        candidate.languages_worked_with = ['Scala', 'Ruby', 'Java']
        def candidate.applied_recently? 
          false
        end
        eval(user_code_input).should be
      end
      it "programmers who do not list Ruby among languages that they've worked with are not considered" do
        candidate = OpenStruct.new
        candidate.years_of_experience = 3
        candidate.github_points = 555
        candidate.age = 25
        candidate.languages_worked_with = ['Scala', 'Java']
        def candidate.applied_recently? 
          false
        end
        eval(user_code_input).should_not be
      end        
      it "a programmer who has applied recently is not considered" do
        candidate = OpenStruct.new
        candidate.years_of_experience = 3
        candidate.github_points = 555
        candidate.age = 25
        candidate.languages_worked_with = ['Scala', 'Java', 'Ruby']
        def candidate.applied_recently? 
          true
        end
        eval(user_code_input).should_not be
      end
      it "programmers with neither 2 years experience nor 500 Github points are not considered" do
        candidate = OpenStruct.new
        candidate.years_of_experience = 1
        candidate.github_points = 200
        candidate.age = 25
        candidate.languages_worked_with = ['Scala', 'Java', 'Ruby']
        def candidate.applied_recently? 
          false
        end
        eval(user_code_input).should_not be
      end
      it "smart kids are sadly not considered" do
        candidate = OpenStruct.new
        candidate.years_of_experience = 3
        candidate.github_points = 600
        candidate.age = 10
        candidate.languages_worked_with = ['Scala', 'Java', 'Ruby']
        def candidate.applied_recently? 
          false
        end
        eval(user_code_input).should_not be
      end
    SPECS_DATA
  !release

  %p
    Awesome! Now that you've learned how to write boolean expressions in Ruby, let
    us see how we can use them to decide the flow of our application in the 
    next lesson.
